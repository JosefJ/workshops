
in contracts.json add a 'from: address' option

https://www.npmjs.com/package/github-download
https://www.npmjs.com/package/ipfs-api

* if wallet is generated on the dapp, then it's less likely to have compatiblity issues
* balance can be set in the genesis block

* should support different providers for different contracts
* need to through recent PRs and check changes

TODO:
* think in terms of workflow and use cases
* don't copy, instead think in terms of goals and the best way to accomplish them

* migrations
** big question: how does this interact with contracts config
* data migrations
* solidity tests
* complete documentation
* windows support
* boilerplate initilization
* importing contracts from npm and ethrpm
** http://truffleframework.com/docs/getting_started/packages-npm
** it seems the build/ is supose to be included
** npm stuff is somewhat similar to the plugin stuff, but plugins are implicit
* migrations
** keeps track of migrations done
** uses deployer.deploy contract and artifacts and all that
** using embarkjs contract.deploy will be cleaner
** should take into account gas gosts and config etc
** needs a migration contract which is weird as fuck
*** looks like it's for keeping track of the migrations (WTF)
** migration can support (if network == 'live')
** also has accounts
** overwrite option is interesting (overwrite false to avoid overriding already existing networks)
** library support
*** can 'link' contracts
** migrations should support the same options as the contracts config

* migrations should support ipfs, etc..

* test
** should be able to do embark test <filename>
** differentiating factor, support both 'own' javascript tests and test with mocha
*** this would remove the need for the package requires and make everything faster
** make it plug and play
*** make it work with existing tests
** need to support more 'mocha' style syntax 
** idea: add cucumber support by default
** important: under the hood is using mocha basically...
** to reflect: deployAll feature, or import a specific contract, or both

* solidity tests
** essentially they are taking a internal contract which has the asserts
** todo: add more powerfull asserts

* note: what's the point of a having return on a non-constant method
** make embarkjs work even if return is non-constant (number, boolean)

* really weird the documentation about going through the logs to find the event
* embarkjs: support new() as an alias of deploy()
* embarkjs: support .at(address) alias
* embarkjs: short hand to send ether .send(ether) and .send(num, "ether")

* see .link .setProvider .setNetwork

* ethpm
** install package@version
** idea: support the ethpm contracts directly in contracts.json or in a package.json file
** see contract publishing
** see hdwallet-provider

* idea: consider separating 'node' config from 'blockchain' config
** node: options for geth
** blockchain: networkId and stuff like that

* npm
** pretty similar to plugins, but imports are explicity with import "package-name/contract.sol"
*** could easily make the contract name with a namespace
*** for the config it could be "package-name/contract": {}
** the build/ dir is included, which includes the deployed directories
*** it's already possible in the plugin with contracts.json but not automatic, it combines chains.json + contracts.json
*** challenge is to do this in a consistent manner, taking into account private and public networks
*** can make the plugin 'embark compatible', i.e it should be possible to publish an embark dapp as a npm package

* implement console (easy win)

* cmd to exec scripts (pretty much like migrations)
** question in the context of the dapp or outside of it


idea: support 'deploymentType': 'implicit/explicit'

* note: implicit / default is a good strength, need to keep it while remaining flexible

* TODO:
** check if promises are working as expected, i.e then(instance) { return instance.method() }.then(method_return)

write complete guide from scratch, end-to-end, no assumptions





TODO:
* check content of ./build/contracts





* easy chains.json sharing by usin gist

So main things about Slack for work environment: 
- @ sidebar / starred messages kinda acts as a todo-list
- easily hop between DMs, internal team channels, and client comm channels
- easily share (and search and find later) files
- timezones keep people from being blasted so I dont feel bad msging at all hours (we're in like 10 timezones now)
- handles images way better than skype
- emojis + reactions = acknowledgment of message without clutter
- giphy integration ðŸ˜‚

support debugging directly in console

test protocol:
- test asset and contracts changes

https://github.com/raiden-network/raiden/blob/master/docs/api.rst

separate each modules into its own folder
* core has stuff needed for init
* modules have the stuff needed and are called by the engine
* module architecture could connect to plugin architecture

perhaps modules should be able to register their own service checks
* would remove duplication of code

plugins
* modules should be able to register their own plugins calls
* even the plugins should be able to extend the plugin api

status embark cmd center

TODO:
- basically replace all fors with async eachObject

refactor into a module that
- runs in async.parallel a list of service checks;
- has a addService method to add services to the list
- emits a servicesUpdate list which is listened to by the dashboard
- can emit events to indicate a service is available again

support in the plugin API something like: embark.addService("ServiceName", function(cb) {
    // if service up
    // // return cb(["Service 1.4", true]);
    // // else
    // // return cb(["Service", false]);
    // });

servicesMonitor

- task: 
* name
* time
* cb => {:name, :status}

- runs in parallel, syncs at the end

* gets stuck when killing blockchain in the middle of deployment

* always generate some sort of empty dapp

use this to test windows builds https://www.appveyor.com/
https://coveralls.io/

https://zeronet.readthedocs.io/en/latest/site_development/zeroframe_api_reference/#filewrite-inner_path-content

TODO:
- warn when rpcWhitelisting is different from webserver port
- add 'auto' option to rpc whitelisting

* detect config changes
* detect when embark blockchain is available again
* should update just the target file that has actually been affected by the change
* add host and port config support for whisper
* no need to copy all the js/ dir to .embark
* include version on template

* detect if a contract is not in a env
* get complete state
** http://stackoverflow.com/questions/32828415/how-to-run-multiple-async-functions-then-execute-callback
* should be able to define the chains.json object in the blockchain config

Big Stuff
==========
* support ENS and IPNS

admin interface
** contracts UI
** Remix transaction list
** https://files.gitter.im/iurimatias/embark-framework/DRtg/blob

embark server
* shared chains.json file
* ether assigned by contract deployment

add ethpm to plugins
import ethpm/contract



* queue system
* might need to implement a queue system with some sort of locks
** e.g on file system change, queue until current process finishes

* efficient file watch and build
** save in config glob pattern and loaded files
** if path is given, only return is path matches glob

redeploy
function reloadFiles(callback) {
  self.config.reloadConfig();
  callback();
},

plugins
* can simplify the code even more by moving the looping logic up

* write different articles mentioning embark

* contractsManager should NOT modifiy original config
** generally modules shouldn't be destructive

* warn user if -p option is different from rpc config

* current problem
** compiler was already loaded, no need to reload


performance
* lots of things can be done in paralell
* loading/reading files from disk slows things down
* need to run compiler in a separate thread alltogether
** https://nodejs.org/api/child_process.html
** https://github.com/audreyt/node-webworker-threads


* should be able to run geth WITHOUT rpc

* go through the code, ask yourself:
** is this feature documented?
** is there a way this feature can be showed in a tutorial
** is there something missing that would make this way cooler

* should detect changes in embark.json

* big bug (?)
** .set().then() is just mining the transation not sending when the transaction has mined
*** possibility: add .wait()

* better error message for lack of funds

* suport --password

idea: contribute commander to solc to minimize dependencies

api:
- get embark file (for __dirname files)
- get file (returns object {filename: content: function(){}, pathname})

npm -g install dependo

// TODO: find a way to do npm install without using cd

slowdown:
- the slowness of the console might be due to the console eval

philosophy:
* decouple modules
* should work in both os and browser
* filesystem and os functionality abstracted
* throw exceptions instead of exiting abruptly
* always use async

https://github.com/cryptape/ethereum-bootstrap

https://www.npmjs.com/package/globule
https://www.npmjs.com/package/micromatch

* idea support truffle tests
* pudding to embarkjs bindings

go through each file, see what could be incompatible with web and abstract it

* keep track of onDeploy cmds that ran
"onDeploy": [
  "SimpleStorage.set(250)"
]

better code:
* can move deploy tracker to config or some 'general environment state'
* can abstract the file system
* utils class
* write pretty json could be abstracted
* modules don't deal with FS directly, instead they write in a module
* logger needs almost aways
* move eval code to its own module
* need to re-evaluate the exit calls

* the evals can be mostly avoided by re-initializing the contract code

todo:
* update compile plugin

embark online
* find how to load/save gist/github projects directly from console as a file system
** and/or save projects directly in swarm or ipfs
* test running embark directly in the browser / packaging
* replace fs with a web version to read github
* the memory fs should work in node just the same

debug Contract
* option to take a transaction and debug it
* opens a browser window with remix

BUG:
* AnotherStorage keeps redeploying
* does ipfs api work without jquery

important:
* need to add 'auto' by default to tests
* if contract doesn't deploy it should give an error in the specs

tutorials
* token factory
* decentralized twitter
* decentralized forum

* flow js to solidity converter
* add redeploy cmd
* put embarkjs in tests
* need a 'reset' for the tests
* track asset changes (e.g hash file contents and put in .embark)
* implement redeploy command
* embark deploy cmd is missing
* support specifying a different web3 config for the client side
* keep cmd history for console

bugs:
* if $Contract is mispelled there is a big error
* if the contract has a bug compiling there is no proper error
* doing 'embark upload' does not result in a clear error message
* running embark upload is showing embark-babel

* tolerate lack of storage.json and comunication.json files
* detect if IPFS/whisper is disabled
* interesting problem: if the compiler changes, it makes it look like the contract did too

* developing/testing with different accounts can be still be a bit of an issue

create storage.json
-> configure ipfs executable location
-> configure port and host
-> per environment

    "embark-pipelinefiles": {},
    "embark-pipelinefiles2": {},
    "embark-babel": {},
    "embark-contracts": {},
    "embark-compiler": {}

    "embark": "../",
    "mocha": "^2.2.5",
    "embark-pipelinefiles": "/Users/iurimatias/Projects/embark-pipelinefiles",
    "embark-pipelinefiles2": "/Users/iurimatias/Projects/embark-pipelinefiles2",
    "embark-babel": "https://github.com/iurimatias/embark-babel.git",
    "embark-contracts": "/Users/iurimatias/Projects/embark-contracts",
    "embark-compiler": "/Users/iurimatias/Projects/plugins/embark-compiler"

============

V addFileToPipeline
V*is this working with css and other files????
V* test images
V** read file stream besides text content
V make sure to tolerate embark.json that don't have plugins
V fix specs
V make plugins work in Test
V make test work again


* plugin shouldn't crash the whole thing
* include what is the current environment
* auto seems to be limiting gas to 700k

============

* need to read file stream

idea:
* allow a embark app, to be published as a NPM package! for use in javascript


= supported plugins
* compiler
** viper plugin
** lll
* services
* extend embarkjs
* embarkjs provider
* blockchain client
* command line commands and arguments or extensions
* on test

* need to generate maps otherwise it's really hard to use this
* an error in contract deployment shouldn't continue the build process

* editing a html file (title) is not redeploying (might just be chrome)
* add redeploy command
* rebuild only the set of files necessary

embark command to generate abi file of a contract

plugin functionality to add
* option to always keep default behaviour
* extend deployment
* message bus (e.g tell embark to deploy something)
* detect adding plugins
* redux style chrome extension
** shows ethereum calls being made

//import "token2.sol";

//contract MyToken is Token(1000) {}
//contract MyToken is Token2(1000) {}

//contract MyToken is Token {
//
//  function MyToken(uint supply) Token(supply) {
//  }
//
//}

embark console

* run testrpc is no server is found
* need to check webserver for real
* support connecting through ipc

plugins:
* display cleaner messae when plugin is not available
* isolate plugin errors
* add some sort of API versioning
* don't allow plugins to crash app


embark plugin add

* add welcome to embark ascii
* need to speed up console/dashboard

test
* embark demo, file creation
* test template generator
* update dependencies
* create a set of test suites to test the different features

* create a testing protocol
** e.g create demo and new app
** check if main commands are all working

* getting error when creatin new dapp, it's possible the copy process is async

* detect running commands in a non-embark directory

* add gifs to documentation
* more graphics
* add ascii art to some commands

* detect is arguments given exceed or are less than expected in constructor

* get rid of grunt if possible

* follow instructions in docs
* add embark swarm for convenience

* communication layers
** stop listening to topics

* support quick ABI UI generation
** support react integration

* support exit as quit command also


* plugin options


better cmd line
* http://vorpal.js.org/
* http://stackoverflow.com/questions/34414603/how-to-integrate-node-module-vorpal-and-blessed

* ascii https://github.com/guo-yu/ascii

* tutorial how to do your own 'million dollar page'

* after rebuilding assets it should say ready

* add keybiding to 'focus' on console
* add welcome message and explanation that console is dragable

* add small ascii icons to the available services

* generate correct error for solidity errors
* so the backtrace of actual errors can still be printed

* display spinning animation when deploying

* api to check if there is a new version of embark available!
** check if there is any sort of connection
** check if the version number in a certain branch

* add a version method

* restablish connection to ethereum node should
** redeploy contracts
** warn in console

* add to: to whisper

* supported react

* save logs in .embark 

* checkGas cmd to console to check the gas costs for a contract
* include gas estimates in EmbarkJS
* display in logs with how much gas a contract was deployed


* support copying to a directory
 "*": ["app/html/*"],
 "html/*": ["app/html/*"],

* use solc loadRemoteVersion functionality

* do a test api for whisper and ipfs

* support es6, esx, etc..

* write plugins

https://github.com/ConsenSys/eth-lightwallet

* test contract import

* support a port option for embark run

* make dashboard optional



* support creating a boilerplate app in the same directory
** useful for migrations

* ga to find relationships between opcodes

* use development settings in simulator
* or add a simulator environment

* contract not redeploying when gas config changes

* save codeHash or code itself in the chains file
* save transactionHash in the chains file

* detect typical error messages and add explanations

* add a msg explaining the console window is scrollable

* try go guess gas values for contract deployments that have arguments

* https://jsfiddle.net/zkm1jy9y/

* include app name on package.json

* run console commands inside the embark console (e.g git)

* detect if environment is not known

* add solc to available services
* or a 'versions' command to list the stack

